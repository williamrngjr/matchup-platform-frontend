rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- COMMON USER MANAGEMENT ---
    // Rules for the 'users' collection (stores basic user data like email, userType)
    match /users/{userId} {
      allow read, create: if request.auth != null; // Any logged-in user can read/create their own user document
      allow update: if request.auth != null && request.auth.uid == userId; // Users can only update their own user document
      allow delete: if false; // Users cannot delete their own user document directly
      allow read, update, delete: if isUserAdmin(); // Admin override
    }

    // --- CUSTOMER PROFILES ---
    // Rules for the 'customers' collection
    match /customers/{customerId} {
      allow read: if true; // Publicly readable for exploring customers (if you allow that)
      // Allow customer to read their OWN profile (for editing) OR if public read is true
      allow read: if true || (request.auth != null && request.auth.uid == resource.data.userId); // MODIFIED READ RULE
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if false;
      allow read, update, delete: if isUserAdmin(); // Admin override
    }

    // --- DESIGNER PROFILES ---
    // Rules for the 'designers' collection
    match /designers/{designerId} {
      allow read: if true; // Publicly readable for exploration
      // Allow designer to read their OWN profile (for editing) OR if public read is true
      allow read: if true || (request.auth != null && request.auth.uid == resource.data.userId); // MODIFIED READ RULE
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if false;
      allow read, update, delete: if isUserAdmin(); // Admin override
    }

    // --- ARCHITECT PROFILES ---
    // Rules for the 'architects' collection
    match /architects/{architectId} {
      allow read: if true; // Publicly readable for exploration
      // Allow architect to read their OWN profile (for editing) OR if public read is true
      allow read: if true || (request.auth != null && request.auth.uid == resource.data.userId); // MODIFIED READ RULE
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if false;
      allow read, update, delete: if isUserAdmin(); // Admin override
    }

    // --- CONTRACTOR PROFILES ---
    // Rules for the 'contractors' collection (NEW BLOCK)
    match /contractors/{contractorId} {
      allow read: if true; // Publicly readable for exploration
      // Allow contractor to read their OWN profile (for editing) OR if public read is true
      allow read: if true || (request.auth != null && request.auth.uid == resource.data.userId); // MODIFIED READ RULE
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if false;
      allow read, update, delete: if isUserAdmin(); // Admin override
    }

    // --- PROJECT LISTINGS ---
    match /projects/{projectId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.customerId;
      allow update: if request.auth != null && request.auth.uid == resource.data.customerId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.customerId;
      allow read, update, delete: if isUserAdmin();
    }

    // --- PROJECT PROPOSALS ---
    match /projects/{projectId}/proposals/{proposalId} {
        // Allow create if authenticated user is designer, architect, OR contractor
        // AND their UID matches the professionalUserId they are writing.
        allow create: if request.auth != null &&
                      (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'designer' ||
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'architect' ||
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'contractor') && // INCLUDES CONTRACTOR
                      request.auth.uid == request.resource.data.professionalUserId;

        // Allow read if project owner (customer) OR professional who submitted
        allow read: if request.auth != null &&
                    (request.auth.uid == get(/databases/$(database)/documents/projects/$(projectId)).data.customerId ||
                     request.auth.uid == resource.data.professionalUserId);

        // Allow update if professional who submitted
        allow update: if request.auth != null && request.auth.uid == resource.data.professionalUserId;
        allow delete: if false;
        allow read, update, delete: if isUserAdmin();
    }

    // --- REVIEWS ---
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.customerId;
      allow update: if false;
      allow delete: if false;
      allow read, update, delete: if isUserAdmin();
    }

    // --- RANKINGS ---
    match /rankings/{rankingType} {
      allow read: if true;
      allow write: if false;
      allow read, update, delete: if isUserAdmin();
    }

    // --- MESSAGING / CONVERSATIONS ---
    match /conversations/{conversationId} {
      allow read: if request.auth != null && request.resource.data.participants.hasAny([request.auth.uid]);
      allow create: if request.auth != null && request.resource.data.participants.hasAll([request.auth.uid, request.resource.data.participants[1]]) && request.resource.data.participants.size() == 2;
      allow update: if request.auth != null && request.resource.data.participants.hasAny([request.auth.uid]);
      allow delete: if false;
      allow read, update, delete: if isUserAdmin();

      match /messages/{messageId} {
        allow read: if request.auth != null && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]);
        allow create: if request.auth != null && request.resource.data.senderId == request.auth.uid && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]);
        allow update: if false;
        allow delete: if false;
        allow read, update, delete: if isUserAdmin();
      }
    }

    // --- HELPER FUNCTIONS ---
    function isUserAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'admin';
    }
  }
}