rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ... (previous rules for users, customers, designers, architects, projects, reviews, rankings) ...

    match /users/{userId} {
      allow read, create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == userId;

      // Allow admin to read all user profiles
      allow read: if isUserAdmin();
      // Allow admin to update/delete any user profile (be cautious with this in production)
      allow update, delete: if isUserAdmin();
    }

    match /conversations/{conversationId} {
      // Users can only read/write conversations they are a participant of
      allow read: if request.auth != null && request.resource.data.participants.hasAny([request.auth.uid]);
      allow create: if request.auth != null && request.resource.data.participants.hasAll([request.auth.uid, request.resource.data.participants[1]]) && request.resource.data.participants.size() == 2;
      // Allow participants to update lastMessage/lastMessageAt
      allow update: if request.auth != null && request.resource.data.participants.hasAny([request.auth.uid]);

      match /messages/{messageId} {
        // Users can only read messages in conversations they are a participant of
        allow read: if request.auth != null && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]);
        // Users can only create messages if they are a participant AND the senderId matches their UID
        allow create: if request.auth != null && request.resource.data.senderId == request.auth.uid && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants.hasAny([request.auth.uid]);
      }
    }

    // Helper function for admin check
    function isUserAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'admin';
    }
  }
}